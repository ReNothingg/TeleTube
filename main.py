import asyncio
import logging
import os
import random
from datetime import datetime, timedelta

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from dotenv import load_dotenv
from telegram import (BotCommand, ChatMember, ReplyKeyboardMarkup, Update,
                      KeyboardButton)
from telegram.ext import (Application, ApplicationBuilder, CallbackContext,
                          CommandHandler, ContextTypes)
from telegram.constants import ParseMode

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_ID = int(os.getenv("CREATOR_ID", 0)) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int, 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
CHANNEL_ID = os.getenv("CHANNEL_ID") # –ù–∞–ø—Ä–∏–º–µ—Ä, "@TeleTubeNews" –∏–ª–∏ "-1001234567890" –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö

DATABASE_FILE = os.getenv("DATABASE_FILE", "database.txt")
KEYWORDS_FILE = os.getenv("KEYWORDS_FILE", "keywords.txt")
LEADERBOARD_IMAGE_FILE = "leaderboard_pic.png"

COOLDOWN_HOURS = 12
POPULARITY_THRESHOLD = 7
KEYWORD_BONUS_POINTS = 2
POPULARITY_RANDOM_MIN = -10
POPULARITY_RANDOM_MAX = 20
BONUS_SUBSCRIBERS_MIN = 1
BONUS_SUBSCRIBERS_MAX = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def is_subscribed(user_id: int, bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª."""
    if not CHANNEL_ID:
        logger.warning("CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return True # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")
        return False # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ) —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

def load_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    data = {}
    if not os.path.exists(DATABASE_FILE):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        with open(DATABASE_FILE, 'w', encoding='utf-8') as file:
            file.write("user_id | username | subscribers | last_used_timestamp\n")
        return data

    try:
        with open(DATABASE_FILE, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            if not lines or not lines[0].strip().startswith("user_id"): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                with open(DATABASE_FILE, 'w', encoding='utf-8') as f_write:
                    f_write.write("user_id | username | subscribers | last_used_timestamp\n")
                return data

            for line in lines[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                parts = line.strip().split(' | ')
                if len(parts) == 4:
                    user_id, username, subscribers, last_used_ts = parts
                    try:
                        data[int(user_id)] = {
                            'username': username.strip(),
                            'subscribers': int(subscribers.strip()),
                            'last_used_timestamp': float(last_used_ts.strip()) # –•—Ä–∞–Ω–∏–º –∫–∞–∫ timestamp
                        }
                    except ValueError:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {line.strip()}")
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {line.strip()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {DATABASE_FILE}: {e}")
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return {}
    return data

def save_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    try:
        with open(DATABASE_FILE, 'w', encoding='utf-8') as file:
            file.write("user_id | username | subscribers | last_used_timestamp\n")
            for user_id, info in data.items():
                file.write(
                    f"{user_id} | {info['username']} | {info['subscribers']} | {info['last_used_timestamp']}\n"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {DATABASE_FILE}: {e}")


def load_keywords(filename: str = KEYWORDS_FILE) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(filename):
        logger.warning(f"–§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π.")
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n")
            f.write("–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ\n")
            f.write("—Ö–∞–π–ø\n")
        return ["–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "—Ö–∞–π–ø"] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip().lower() for line in file if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return []

def evaluate_video_popularity(video_title: str) -> int:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏."""
    keywords = load_keywords()
    title_lower = video_title.lower()
    keyword_bonus = sum(KEYWORD_BONUS_POINTS for keyword in keywords if keyword in title_lower)
    random_score = random.randint(POPULARITY_RANDOM_MIN, POPULARITY_RANDOM_MAX)
    return keyword_bonus + random_score

async def subscription_check_middleware(update: Update, context: CallbackContext, command_handler_coro):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã."""
    if not CHANNEL_ID: # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await command_handler_coro(update, context)
        return

    user_id = update.effective_user.id
    if not await is_subscribed(user_id, context.bot):
        channel_link = CHANNEL_ID if CHANNEL_ID.startswith('@') else f"https://t.me/c/{CHANNEL_ID.replace('-100', '')}" # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö
        if CHANNEL_ID.startswith('@'):
            channel_display_name = CHANNEL_ID
        else:
            try:
                chat = await context.bot.get_chat(CHANNEL_ID)
                channel_display_name = chat.title or f"–∫–∞–Ω–∞–ª (ID: {CHANNEL_ID})"
            except Exception:
                channel_display_name = f"–∫–∞–Ω–∞–ª ({CHANNEL_ID})"

        await update.message.reply_text(
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_display_name} ({channel_link}).\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await command_handler_coro(update, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} (ID: {user.id}) –≤—ã–∑–≤–∞–ª /start")

    if CHANNEL_ID and not await is_subscribed(user.id, context.bot):
        channel_link = CHANNEL_ID if CHANNEL_ID.startswith('@') else f"https://t.me/c/{CHANNEL_ID.replace('-100', '')}"
        channel_display_name = CHANNEL_ID if CHANNEL_ID.startswith('@') else f"–∫–∞–Ω–∞–ª ({CHANNEL_ID})"
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–Ø TeleTubeSim –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∑–≤–µ–∑–¥–æ–π!\n\n"
            f"–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_display_name} ({channel_link}).\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
        return

    data = load_data()
    if user.id not in data:
        data[user.id] = {
            'username': user.username or user.first_name,
            'subscribers': 0,
            'last_used_timestamp': 0.0 # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
        }
        save_data(data)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} (ID: {user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

    keyboard = [
        [KeyboardButton("/addvideo –ù–æ–≤–æ–µ –í–∏–¥–µ–æ")],
        [KeyboardButton("/leaderboard"), KeyboardButton("/leaderboardpic")],
        [KeyboardButton("/myprofile"), KeyboardButton("/help")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –≤ –∏–≥—Ä–µ TeleTubeSim!\n\n"
        "–°–Ω–∏–º–∞–π '–≤–∏–¥–µ–æ', –Ω–∞–±–∏—Ä–∞–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å—Ç–∞–Ω—å —Å–∞–º—ã–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

async def add_video_command_internal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)."""
    user = update.effective_user
    user_id = user.id
    username = user.username or user.first_name

    if not context.args:
        await update.message.reply_text(
            "–ù—É–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ! ‚ú®\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/addvideo –ú–æ–µ –°—É–ø–µ—Ä –í–∏–¥–µ–æ`\n\n"
            "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã: `/video`, `/add`, `/newvideo`, `/publishvideo`, `/new`, `/publish`.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    video_title = ' '.join(context.args)
    current_timestamp = datetime.now().timestamp()
    data = load_data()

    if user_id not in data: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª /start
        data[user_id] = {
            'username': username,
            'subscribers': 0,
            'last_used_timestamp': 0.0
        }

    user_data = data[user_id]
    last_used_dt = datetime.fromtimestamp(user_data.get('last_used_timestamp', 0.0))
    
    if datetime.now() - last_used_dt < timedelta(hours=COOLDOWN_HOURS):
        remaining_time = timedelta(hours=COOLDOWN_HOURS) - (datetime.now() - last_used_dt)
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        await update.message.reply_text(
            f"‚è≥ {username}, —Ç—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∏–¥–µ–æ. "
            f"–°–ª–µ–¥—É—é—â–µ–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω."
        )
        return

    popularity_score = evaluate_video_popularity(video_title)
    subscribers_change = popularity_score
    bonus_subscribers = 0

    message = f"üé¨ {username}, —Ç–≤–æ–µ –≤–∏–¥–µ–æ \"{video_title}\" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n"

    if popularity_score > POPULARITY_THRESHOLD:
        bonus_subscribers = random.randint(BONUS_SUBSCRIBERS_MIN, BONUS_SUBSCRIBERS_MAX)
        subscribers_change += bonus_subscribers
        message += f"üåü –í–∞—É! –¢–µ–º–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å—É–ø–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–π! –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å: +{bonus_subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
    elif popularity_score < 0:
         message += f"üòï –£–ø—Å, —Ç–µ–º–∞ –Ω–µ –∑–∞—à–ª–∞. –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!\n"
    else:
        message += f"üëç –ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ!\n"


    user_data['subscribers'] = max(0, user_data['subscribers'] + subscribers_change) # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å < 0
    user_data['last_used_timestamp'] = current_timestamp
    user_data['username'] = username # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    save_data(data)

    if subscribers_change > 0:
        message += f"üìà –ù–∞ —Ç–µ–±—è –ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {subscribers_change} —á–µ–ª–æ–≤–µ–∫.\n"
    elif subscribers_change < 0:
        message += f"üìâ –û—Ç —Ç–µ–±—è –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å: {abs(subscribers_change)} —á–µ–ª–æ–≤–µ–∫.\n"
    else:
        message += f"ü§∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n"
    
    message += f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_data['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –¥–æ–±–∞–≤–∏–ª –≤–∏–¥–µ–æ '{video_title}', –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_change}, –≤—Å–µ–≥–æ: {user_data['subscribers']}")


async def add_video_command_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è add_video_command_internal —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    await subscription_check_middleware(update, context, add_video_command_internal)


async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    data = load_data()
    if not data:
        await update.message.reply_text("üèÜ –ü–æ–∫–∞ –ø—É—Å—Ç–æ–≤–∞—Ç–æ... –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º –≤ —Ç–æ–ø–µ!")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 0 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ (–∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º –≤—Å–µ—Ö)
    sorted_users = sorted(data.items(), key=lambda item: item[1]['subscribers'], reverse=True)

    leaderboard_message = "üèÜ <b>–¢–æ–ø TeleTube—Ä–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:</b>\n\n"
    max_display = 15 # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    for i, (user_id, info) in enumerate(sorted_users[:max_display], start=1):
        leaderboard_message += f"{i}. {info['username']} - {info['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"

    if not sorted_users: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç) –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
         await update.message.reply_text("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤ —Ç–æ–ø–µ.")
         return
         
    await update.message.reply_text(leaderboard_message, parse_mode=ParseMode.HTML)

async def leaderboard_pic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã."""
    data_dict = load_data()
    if not data_dict:
        await update.message.reply_text("üìä –î–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ DataFrame
    df = pd.DataFrame.from_dict(data_dict, orient='index')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü 'subscribers' –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if 'subscribers' not in df.columns or df['subscribers'].isnull().all() or not pd.api.types.is_numeric_dtype(df['subscribers']):
        await update.message.reply_text("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è leaderboard_pic: {df.head()}")
        return

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ <= 0, –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º
    valid_data = df[df['subscribers'] > 0].sort_values(by='subscribers', ascending=False)

    if valid_data.empty:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    top_data = valid_data.head(15) # –¢–æ–ø-15 –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã

    usernames = top_data['username'].values
    subscribers_counts = top_data['subscribers'].values

    fig, ax = plt.subplots(figsize=(10, 7), facecolor='white')
    wedges, texts, autotexts = ax.pie(
        subscribers_counts,
        autopct=lambda p: f'{p:.1f}%' if p > 3 else '', # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º % –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3%
        startangle=140,
        colors=plt.cm.Paired(np.linspace(0, 1, len(subscribers_counts)))
    )
    
    plt.setp(autotexts, size=8, weight="bold", color="white")
    ax.set_title("üèÜ –¢–æ–ø TeleTube—Ä–æ–≤ (–î–∏–∞–≥—Ä–∞–º–º–∞)", fontsize=16, pad=20)

    # –õ–µ–≥–µ–Ω–¥–∞
    ax.legend(wedges, [f"{name} ({count})" for name, count in zip(usernames, subscribers_counts)],
              title="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
              loc="center left",
              bbox_to_anchor=(1, 0, 0.5, 1),
              fontsize=9)

    plt.tight_layout(rect=[0, 0, 0.75, 1]) # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã

    try:
        plt.savefig(LEADERBOARD_IMAGE_FILE, format='png', dpi=150)
        with open(LEADERBOARD_IMAGE_FILE, 'rb') as photo_file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ–ø–æ–º: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if os.path.exists(LEADERBOARD_IMAGE_FILE):
            os.remove(LEADERBOARD_IMAGE_FILE)
        plt.close(fig) # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    data = load_data()

    if user.id not in data:
        await update.message.reply_text(
            "üë§ –Ø –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â–µ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∏–¥–µ–æ.\n"
            "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ>!"
        )
        return

    user_info = data[user.id]
    subscribers = user_info.get('subscribers', 0)
    last_used_ts = user_info.get('last_used_timestamp', 0)
    
    if last_used_ts == 0:
        last_video_time_str = "–µ—â–µ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∏–¥–µ–æ"
    else:
        last_used_dt = datetime.fromtimestamp(last_used_ts)
        last_video_time_str = last_used_dt.strftime('%Y-%m-%d %H:%M:%S')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
        next_video_time = last_used_dt + timedelta(hours=COOLDOWN_HOURS)
        if datetime.now() < next_video_time:
            remaining_time = next_video_time - datetime.now()
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            can_post_str = f"–°–º–æ–∂–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑: {hours} —á {minutes} –º–∏–Ω."
        else:
            can_post_str = "–ú–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"


    profile_message = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {user_info.get('username', user.first_name)}:</b>\n\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}\n"
        f"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ: {last_video_time_str}\n"
        f"‚è≥ {can_post_str if last_used_ts != 0 else '–ü—É–±–ª–∏–∫—É–π –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –∫–æ–º–∞–Ω–¥–æ–π /addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ>!'}"
    )
    await update.message.reply_text(profile_message, parse_mode=ParseMode.HTML)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    help_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleTube Simulator!</b> üåü\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å '–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ' –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –∑–∞ –∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ TeleTube—Ä–∞!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üé¨ `/addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ>` - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ (–∏–ª–∏ `/new`, `/publish` –∏ –¥—Ä. –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã).\n"
        "<em>–ü—Ä–∏–º–µ—Ä: `/addvideo –°–∞–º–æ–µ —Å–º–µ—à–Ω–æ–µ –≤–∏–¥–µ–æ 2077`</em>\n\n"
        "üèÜ `/leaderboard` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ `/top`, `/stats`).\n"
        "üìä `/leaderboardpic` - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ `/toppic`, `/statspic`).\n"
        "üë§ `/myprofile` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
        "üÜò `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "–ö–∞–∂–¥–æ–µ '–≤–∏–¥–µ–æ' –ø–æ–ª—É—á–∞–µ—Ç –æ—á–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è (–∏—â–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!) –∏ –Ω–µ–º–Ω–æ–≥–æ —É–¥–∞—á–∏. "
        "–ß–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ –≤–∏–¥–µ–æ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å (–∏–ª–∏ –ø–æ—Ç–µ—Ä—è–µ—à—å üò•).\n"
        "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {} —á–∞—Å–æ–≤.\n\n"
        "–£–¥–∞—á–∏ –≤ –ø–æ–∫–æ—Ä–µ–Ω–∏–∏ –≤–µ—Ä—à–∏–Ω TeleTube!"
    ).format(COOLDOWN_HOURS)
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è CREATOR_ID) ---

async def admin_cheat_add_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ß–∏—Ç-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)."""
    user = update.effective_user
    if user.id != CREATOR_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/CHEATaddsub <user_id –∏–ª–∏ @username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`")
        return

    target_identifier = context.args[0]
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = load_data()
    target_user_id = None
    target_username_display = target_identifier

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if target_identifier.startswith('@'):
        username_to_find = target_identifier[1:]
        for uid, uinfo in data.items():
            if uinfo['username'].lower() == username_to_find.lower():
                target_user_id = uid
                target_username_display = uinfo['username'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
                break
        if not target_user_id:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {target_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            target_user_id = int(target_identifier)
            if target_user_id not in data:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            target_username_display = data[target_user_id]['username']
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username.")
            return

    if target_user_id:
        data[target_user_id]['subscribers'] += amount
        data[target_user_id]['subscribers'] = max(0, data[target_user_id]['subscribers']) # –ù–µ –Ω–∏–∂–µ –Ω—É–ª—è
        save_data(data)
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username_display} (ID: {target_user_id}) "
            f"{'–¥–æ–±–∞–≤–ª–µ–Ω–æ' if amount >= 0 else '—É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞'} {abs(amount)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. "
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data[target_user_id]['subscribers']}."
        )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.username or user.id} –∏–∑–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {target_username_display} (ID: {target_user_id}) –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data[target_user_id]['subscribers']}")
    # (—Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ target_user_id –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ)


async def admin_delete_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Ç-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)."""
    user_id = update.effective_user.id
    if user_id != CREATOR_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return

    if os.path.exists(DATABASE_FILE):
        try:
            os.remove(DATABASE_FILE)
            await update.message.reply_text(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{DATABASE_FILE}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! "
                                            "–û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏.")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.username or user_id} —É–¥–∞–ª–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {DATABASE_FILE}")
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {DATABASE_FILE} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {e}")
    else:
        await update.message.reply_text(f"–§–∞–π–ª '{DATABASE_FILE}' —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


async def post_init(application: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥)."""
    bot_commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("addvideo", "üé¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä. /addvideo –ú–æ–µ –≤–∏–¥–µ–æ)"),
        BotCommand("leaderboard", "üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø (—Ç–µ–∫—Å—Ç)"),
        BotCommand("leaderboardpic", "üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø (–∫–∞—Ä—Ç–∏–Ω–∫–∞)"),
        BotCommand("myprofile", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    ]
    # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º, –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–æ–∫
    # (–Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –µ—Å–ª–∏ scope –Ω–µ Chat)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –≤ –≤–∏–¥–∏–º—ã–π —Å–ø–∏—Å–æ–∫
    await application.bot.set_my_commands(bot_commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    if not BOT_TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–∫–∞–∂–∏—Ç–µ –µ–µ –≤ .env —Ñ–∞–π–ª–µ.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sys.exit(1) –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ
    if not CREATOR_ID:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CREATOR_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    if not CHANNEL_ID:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")


# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myprofile", my_profile_command))


    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ (—Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏)
    add_video_aliases = ["addvideo", "video", "add", "newvideo", "publishvideo", "new", "publish"]
    for alias in add_video_aliases:
        application.add_handler(CommandHandler(alias, add_video_command_wrapper)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (—Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏)
    leaderboard_aliases = ["leaderboard", "top", "stats"]
    for alias in leaderboard_aliases:
        application.add_handler(CommandHandler(alias, leaderboard_command))

    leaderboard_pic_aliases = ["leaderboardpic", "toppic", "statspic"]
    for alias in leaderboard_pic_aliases:
        application.add_handler(CommandHandler(alias, leaderboard_pic_command))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("CHEATaddsub", admin_cheat_add_subscribers))
    application.add_handler(CommandHandler("CHEATDeleteDatabase", admin_delete_database))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
            f.write("user_id | username | subscribers | last_used_timestamp\n")
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_FILE}")

    if not os.path.exists(KEYWORDS_FILE):
        with open(KEYWORDS_FILE, 'w', encoding='utf-8') as f:
            f.write("# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n")
            f.write("–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ\n")
            f.write("—Ö–∞–π–ø\n")
            f.write("—Ç–æ–ø\n")
            f.write("–Ω–æ–≤–æ–µ\n")
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {KEYWORDS_FILE}")
    
    main()