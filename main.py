import asyncio
import logging
import os
import random
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple, Optional

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from dotenv import load_dotenv
from telegram import (BotCommand, ChatMember, ReplyKeyboardMarkup, Update,
                      KeyboardButton)
from telegram.ext import (Application, ApplicationBuilder, CallbackContext,
                          CommandHandler, ContextTypes)
from telegram.constants import ParseMode

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_ID = int(os.getenv("CREATOR_ID", 0))
CHANNEL_ID = os.getenv("CHANNEL_ID")
BOT_NAME = os.getenv("BOT_NAME", "–ú–æ–π –ë–æ—Ç") # –ò–º—è –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

DATABASE_FILE = os.getenv("DATABASE_FILE", "database.txt")
KEYWORDS_FILE = os.getenv("KEYWORDS_FILE", "keywords.txt")
LEADERBOARD_IMAGE_FILE = "leaderboard_pic.png"

COOLDOWN_HOURS = 12
POPULARITY_THRESHOLD_BONUS = 7 # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
KEYWORD_BONUS_POINTS = 2
POPULARITY_RANDOM_MIN = -10
POPULARITY_RANDOM_MAX = 20
BONUS_SUBSCRIBERS_MIN = 1
BONUS_SUBSCRIBERS_MAX = 5
NEGATIVE_POPULARITY_THRESHOLD = -5 # –ü–æ—Ä–æ–≥ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# user_id: {
#     'username': str,
#     'subscribers': int,
#     'last_used_timestamp': float,
#     'video_count': int,
#     'active_event': Optional[Dict[str, Any]] # {'type': 'bonus_next_video', 'modifier': 5, 'message': '...'}
# }

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def is_subscribed(user_id: int, bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª."""
    if not CHANNEL_ID:
        return True
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –Ω–∞ {CHANNEL_ID}: {e}")
        return False

def load_data() -> Dict[int, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞. –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—è video_count –∏ active_event."""
    data: Dict[int, Dict[str, Any]] = {}
    expected_headers = "user_id | username | subscribers | last_used_timestamp | video_count | active_event_type | active_event_modifier | active_event_message"
    
    if not os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, 'w', encoding='utf-8') as file:
            file.write(expected_headers + "\n")
        return data

    try:
        with open(DATABASE_FILE, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            if not lines or not lines[0].strip().startswith("user_id"):
                with open(DATABASE_FILE, 'w', encoding='utf-8') as f_write:
                    f_write.write(expected_headers + "\n")
                return data

            for line in lines[1:]:
                parts = line.strip().split(' | ')
                if len(parts) == 8: # –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                    user_id_str, username, subscribers_str, last_used_ts_str, video_count_str, event_type, event_modifier_str, event_message = parts
                    try:
                        user_data: Dict[str, Any] = {
                            'username': username.strip(),
                            'subscribers': int(subscribers_str.strip()),
                            'last_used_timestamp': float(last_used_ts_str.strip()),
                            'video_count': int(video_count_str.strip()),
                            'active_event': None
                        }
                        if event_type and event_type != 'None':
                             user_data['active_event'] = {
                                'type': event_type,
                                'modifier': int(event_modifier_str) if event_modifier_str.isdigit() else float(event_modifier_str), # –º–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ float
                                'message': event_message.replace("\\n", "\n") # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                            }
                        data[int(user_id_str)] = user_data
                    except ValueError as e:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ValueError: {e}): {line.strip()}")
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ ({len(parts)} —á–∞—Å—Ç–µ–π) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {line.strip()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {DATABASE_FILE}: {e}")
        return {}
    return data

def save_data(data: Dict[int, Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª, –≤–∫–ª—é—á–∞—è video_count –∏ active_event."""
    try:
        with open(DATABASE_FILE, 'w', encoding='utf-8') as file:
            file.write("user_id | username | subscribers | last_used_timestamp | video_count | active_event_type | active_event_modifier | active_event_message\n")
            for user_id, info in data.items():
                event_type = info.get('active_event', {}).get('type', 'None') if info.get('active_event') else 'None'
                event_modifier = info.get('active_event', {}).get('modifier', '0') if info.get('active_event') else '0'
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                event_message = info.get('active_event', {}).get('message', 'None').replace("\n", "\\n") if info.get('active_event') else 'None'
                
                file.write(
                    f"{user_id} | {info['username']} | {info['subscribers']} | "
                    f"{info['last_used_timestamp']} | {info.get('video_count', 0)} | "
                    f"{event_type} | {event_modifier} | {event_message}\n"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {DATABASE_FILE}: {e}")

def load_keywords(filename: str = KEYWORDS_FILE) -> list:
    if not os.path.exists(filename):
        logger.warning(f"–§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π.")
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ\n—Ö–∞–π–ø\n")
        return ["–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "—Ö–∞–π–ø"]
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip().lower() for line in file if line.strip() and not line.startswith('#')]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ {filename}: {e}")
        return []

def evaluate_video_popularity(video_title: str, base_popularity_modifier: int = 0) -> int:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ, —É—á–∏—Ç—ã–≤–∞—è –±–∞–∑–æ–≤—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç —Å–æ–±—ã—Ç–∏—è)."""
    keywords = load_keywords()
    title_lower = video_title.lower()
    keyword_bonus = sum(KEYWORD_BONUS_POINTS for keyword in keywords if keyword in title_lower)
    random_score = random.randint(POPULARITY_RANDOM_MIN, POPULARITY_RANDOM_MAX)
    return keyword_bonus + random_score + base_popularity_modifier

async def subscription_check_middleware(update: Update, context: CallbackContext, command_handler_coro):
    if not CHANNEL_ID:
        await command_handler_coro(update, context)
        return

    user_id = update.effective_user.id
    if not await is_subscribed(user_id, context.bot):
        channel_link = CHANNEL_ID if CHANNEL_ID.startswith('@') else f"https://t.me/c/{CHANNEL_ID.replace('-100', '')}"
        try:
            chat = await context.bot.get_chat(CHANNEL_ID)
            channel_display_name = chat.title or CHANNEL_ID
        except Exception:
            channel_display_name = CHANNEL_ID
        await update.message.reply_text(
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_display_name} ({channel_link}).\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await command_handler_coro(update, context)


def get_random_event(user_subscribers: int) -> Optional[Dict[str, Any]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    roll = random.randint(1, 100)
    
    # –°–æ–±—ã—Ç–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    # –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ –≤–Ω–∞—á–∞–ª–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—É—Ä–æ–≤–æ
    if user_subscribers < 10 and random.randint(1,3) != 1 : # –ú–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        return None

    if 75 <= roll <= 80: # –ù–µ–±–æ–ª—å—à–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        bonus = random.randint(3, 7)
        return {
            "type": "bonus_next_video",
            "modifier": bonus,
            "message": (f"üéâ –í–Ω–µ–∑–∞–ø–Ω—ã–π —Ö–∞–π–ø! –í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å +{bonus} –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏! "
                        "–¢—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ–º—É!")
        }
    elif 81 <= roll <= 83 and user_subscribers > 20: # –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Ç–µ—Ä—è—Ç—å
        malus = random.randint(2, 5)
        return {
            "type": "malus_next_video",
            "modifier": -malus,
            "message": (f"üìâ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ {BOT_NAME}... –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–∞–¥–∞—Ç—å "
                        f"(-{malus} –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏). –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!")
        }
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    return None


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} (ID: {user.id}) –≤—ã–∑–≤–∞–ª /start")

    if CHANNEL_ID and not await is_subscribed(user.id, context.bot):
        channel_link = CHANNEL_ID if CHANNEL_ID.startswith('@') else f"https://t.me/c/{CHANNEL_ID.lstrip('-100')}"
        channel_display_name = CHANNEL_ID
        if not CHANNEL_ID.startswith('@'):
            try:
                chat = await context.bot.get_chat(CHANNEL_ID)
                channel_display_name = chat.title or CHANNEL_ID
            except Exception:
                pass # –û—Å—Ç–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è

        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–Ø {BOT_NAME}, —Å–∏–º—É–ª—è—Ç–æ—Ä TeleTube-–∑–≤–µ–∑–¥—ã!\n\n"
            f"–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_display_name} ({channel_link}).\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ /start –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
        return

    data = load_data()
    if user.id not in data:
        data[user.id] = {
            'username': user.name, # –ò—Å–ø–æ–ª—å–∑—É–µ–º user.name –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞–µ—Ç @username –µ—Å–ª–∏ –µ—Å—Ç—å)
            'subscribers': 0,
            'last_used_timestamp': 0.0,
            'video_count': 0,
            'active_event': None
        }
        save_data(data)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} (ID: {user.id}) –¥–æ–±–∞–≤–ª–µ–Ω.")

    keyboard = [
        [KeyboardButton(f"/addvideo –ù–æ–≤–æ–µ –í–∏–¥–µ–æ")],
        [KeyboardButton("/leaderboard"), KeyboardButton("/leaderboardpic")],
        [KeyboardButton("/myprofile"), KeyboardButton("/help")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –≤ –∏–≥—Ä–µ {BOT_NAME}!\n\n"
        "–°–Ω–∏–º–∞–π '–≤–∏–¥–µ–æ', –Ω–∞–±–∏—Ä–∞–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Å—Ç–∞–Ω—å —Å–∞–º—ã–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

async def add_video_command_internal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: `/addvideo –ú–æ–µ –°—É–ø–µ—Ä –í–∏–¥–µ–æ`", parse_mode=ParseMode.MARKDOWN
        )
        return

    video_title = ' '.join(context.args)
    current_timestamp = datetime.now().timestamp()
    data = load_data()

    if user.id not in data: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª /start –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        data[user.id] = {
            'username': user.name, 'subscribers': 0, 'last_used_timestamp': 0.0, 
            'video_count': 0, 'active_event': None
        }
    
    user_data = data[user.id]
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    if user_data['username'] != user.name:
        user_data['username'] = user.name
        
    last_used_dt = datetime.fromtimestamp(user_data.get('last_used_timestamp', 0.0))
    
    if datetime.now() - last_used_dt < timedelta(hours=COOLDOWN_HOURS):
        remaining_time = timedelta(hours=COOLDOWN_HOURS) - (datetime.now() - last_used_dt)
        hours, rem_secs = divmod(remaining_time.seconds, 3600)
        minutes, _ = divmod(rem_secs, 60)
        await update.message.reply_text(
            f"‚è≥ {user.first_name}, –∫—É–ª–¥–∞—É–Ω! –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω."
        )
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ---
    event_modifier = 0
    event_applied_message = ""
    if user_data.get('active_event'):
        event = user_data['active_event']
        event_applied_message = f"\n‚ú® *–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ*: {event['message']}"
        if event['type'] in ['bonus_next_video', 'malus_next_video']:
            event_modifier = event['modifier']
        user_data['active_event'] = None # –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑

    popularity_score = evaluate_video_popularity(video_title, base_popularity_modifier=event_modifier)
    subscribers_change = popularity_score # –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ = –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    bonus_subscribers = 0
    
    message_parts = [f"üé¨ {user_data['username']}, –≤–∏–¥–µ–æ \"{video_title}\" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!{event_applied_message}"]

    if popularity_score > POPULARITY_THRESHOLD_BONUS:
        bonus_subscribers = random.randint(BONUS_SUBSCRIBERS_MIN, BONUS_SUBSCRIBERS_MAX)
        subscribers_change += bonus_subscribers
        message_parts.append(f"üåü –°—É–ø–µ—Ä! –¢–µ–º–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∞! –ë–æ–Ω—É—Å: +{bonus_subscribers} –ø–¥–ø.")
    elif popularity_score < NEGATIVE_POPULARITY_THRESHOLD: # –°–∏–ª—å–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        message_parts.append(f"üìâ –û—Ö, –≤–∏–¥–µ–æ –Ω–µ –∑–∞—à–ª–æ... —ç—Ç–æ –±—ã–ª —Ä–∏—Å–∫.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –ø–æ—Ç–µ—Ä—é *–±–æ–ª—å—à–µ–≥–æ* –∫–æ–ª-–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    elif popularity_score < 0:
         message_parts.append(f"üòï –£–ø—Å, —Ç–µ–º–∞ –Ω–µ –æ—Å–æ–±–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞. –ù–µ —Å–¥–∞–≤–∞–π—Å—è!")
    else:
        message_parts.append(f"üëç –ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ!")
    
    user_data['subscribers'] = max(0, user_data['subscribers'] + subscribers_change)
    user_data['last_used_timestamp'] = current_timestamp
    user_data['video_count'] = user_data.get('video_count', 0) + 1
    
    if subscribers_change > 0:
        message_parts.append(f"üìà +{subscribers_change} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    elif subscribers_change < 0:
        message_parts.append(f"üìâ {subscribers_change} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.") # subscribers_change —É–∂–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
    else:
        message_parts.append(f"ü§∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
    
    message_parts.append(f"–ò—Ç–æ–≥–æ —É —Ç–µ–±—è: {user_data['subscribers']} –ø–¥–ø. –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_data['video_count']}.")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ---
    # –°–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ü–û–°–õ–ï –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –°–õ–ï–î–£–Æ–©–ï–ï –≤–∏–¥–µ–æ
    if random.randint(1,4) == 1: # 25% —à–∞–Ω—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
        new_event = get_random_event(user_data['subscribers'])
        if new_event:
            user_data['active_event'] = new_event
            message_parts.append(f"\nüîî *–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!* {new_event['message']}")
            logger.info(f"–î–ª—è {user.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {new_event['type']}")

    save_data(data)
    await update.message.reply_text("\n".join(message_parts), parse_mode=ParseMode.MARKDOWN)
    logger.info(f"–í–∏–¥–µ–æ '{video_title}' –æ—Ç {user.name}. –ò–∑–º: {subscribers_change}. –í—Å–µ–≥–æ: {user_data['subscribers']}. –í–∏–¥–µ–æ: {user_data['video_count']}")

async def add_video_command_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await subscription_check_middleware(update, context, add_video_command_internal)

async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text(f"üèÜ –í {BOT_NAME} –ø–æ–∫–∞ –ø—É—Å—Ç–æ... –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    sorted_users = sorted(data.items(), key=lambda item: item[1]['subscribers'], reverse=True)
    leaderboard_message = f"üèÜ <b>–¢–æ–ø {BOT_NAME}–µ—Ä–æ–≤:</b>\n\n"
    max_display = 15
    
    displayed_count = 0
    for i, (user_id, info) in enumerate(sorted_users):
        if info['subscribers'] <=0 and i >= max_display : # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–æ–ø–∞
             continue
        leaderboard_message += f"{displayed_count + 1}. {info['username']} - {info['subscribers']} –ø–¥–ø. (–≤–∏–¥–µ–æ: {info.get('video_count',0)})\n"
        displayed_count += 1
        if displayed_count >= max_display:
            break

    if displayed_count == 0:
         await update.message.reply_text("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤ —Ç–æ–ø–µ.")
         return
         
    await update.message.reply_text(leaderboard_message, parse_mode=ParseMode.HTML)

async def leaderboard_pic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data_dict = load_data()
    if not data_dict:
        await update.message.reply_text("üìä –î–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    df = pd.DataFrame.from_dict(data_dict, orient='index')
    if 'subscribers' not in df.columns or df['subscribers'].isnull().all() or not pd.api.types.is_numeric_dtype(df['subscribers']):
        await update.message.reply_text("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    valid_data = df[df['subscribers'] > 0].sort_values(by='subscribers', ascending=False)
    if valid_data.empty:
        await update.message.reply_text("üìä –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    top_data = valid_data.head(15)
    usernames = top_data['username'].values
    subscribers_counts = top_data['subscribers'].values

    fig, ax = plt.subplots(figsize=(10, 7), facecolor='white')
    wedges, texts, autotexts = ax.pie(
        subscribers_counts,
        autopct=lambda p: f'{p:.1f}%' if p > 3 else '',
        startangle=140,
        colors=plt.cm.Paired(np.linspace(0, 1, len(subscribers_counts)))
    )
    plt.setp(autotexts, size=8, weight="bold", color="white")
    ax.set_title(f"üèÜ –¢–æ–ø {BOT_NAME}–µ—Ä–æ–≤ (–î–∏–∞–≥—Ä–∞–º–º–∞)", fontsize=16, pad=20)
    ax.legend(wedges, [f"{name} ({count})" for name, count in zip(usernames, subscribers_counts)],
              title="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1), fontsize=9)
    plt.tight_layout(rect=[0, 0, 0.75, 1])

    try:
        plt.savefig(LEADERBOARD_IMAGE_FILE, format='png', dpi=150)
        with open(LEADERBOARD_IMAGE_FILE, 'rb') as photo_file:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø–∞.")
    finally:
        if os.path.exists(LEADERBOARD_IMAGE_FILE): os.remove(LEADERBOARD_IMAGE_FILE)
        plt.close(fig)

async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()

    if user.id not in data or not data[user.id]: # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π data[user.id]
        await update.message.reply_text(
            f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ {BOT_NAME} –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–∞—á–Ω–∏ —Å /addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ>!"
        )
        return

    user_info = data[user.id]
    username_display = user_info.get('username', user.first_name) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è, –∏–ª–∏ –∏–º—è –∏–∑ –¢–ì
    subscribers = user_info.get('subscribers', 0)
    video_count = user_info.get('video_count', 0)
    last_used_ts = user_info.get('last_used_timestamp', 0)
    
    profile_message = [f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {username_display}:</b>\n"]
    profile_message.append(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}")
    profile_message.append(f"üìπ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {video_count}")

    if last_used_ts == 0:
        profile_message.append("–í—ã –µ—â–µ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤–∏–¥–µ–æ.")
        can_post_str = "–ü—É–±–ª–∏–∫—É–π –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ: /addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ>!"
    else:
        last_used_dt = datetime.fromtimestamp(last_used_ts)
        profile_message.append(f"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ: {last_used_dt.strftime('%Y-%m-%d %H:%M')}")
        next_video_time = last_used_dt + timedelta(hours=COOLDOWN_HOURS)
        if datetime.now() < next_video_time:
            remaining_time = next_video_time - datetime.now()
            hours, rem_secs = divmod(remaining_time.seconds, 3600)
            minutes, _ = divmod(rem_secs, 60)
            can_post_str = f"–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑: {hours} —á {minutes} –º–∏–Ω."
        else:
            can_post_str = "–ú–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ!"
    
    profile_message.append(f"‚è≥ {can_post_str}")

    active_event = user_info.get('active_event')
    if active_event:
        profile_message.append(f"\n‚ú® <b>–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b> {active_event['message']}")

    await update.message.reply_text("\n".join(profile_message), parse_mode=ParseMode.HTML)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!</b> üåü\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å '–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ' –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –∑–∞ –∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üé¨ `/addvideo <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.\n"
        "üèÜ `/leaderboard` - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç–æ–ø.\n"
        "üìä `/leaderboardpic` - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç–æ–ø.\n"
        "üë§ `/myprofile` - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üÜò `/help` - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "<b>–ú–µ—Ö–∞–Ω–∏–∫–∞:</b>\n"
        "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è (–∏—â–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ `keywords.txt`!) –∏ —É–¥–∞—á–∏. "
        "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–∑ –≤ {cooldown} —á–∞—Å–æ–≤. –ò–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!\n"
        "–£–¥–∞—á–∏!"
    ).format(cooldown=COOLDOWN_HOURS, bot_name=BOT_NAME)
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ---

async def admin_check(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if update.effective_user.id != CREATOR_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return False
    return True

async def admin_cheat_add_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_check(update): return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/CHEATaddsub <user_id –∏–ª–∏ @username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`")
        return

    target_identifier = context.args[0]
    try: amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = load_data()
    target_user_id = None
    target_username_display = target_identifier

    if target_identifier.startswith('@'):
        username_to_find = target_identifier[1:].lower()
        found = False
        for uid, uinfo in data.items():
            if uinfo.get('username','').lower() == username_to_find or \
               (uinfo.get('username','').startswith('@') and uinfo.get('username','')[1:].lower() == username_to_find) :
                target_user_id = uid
                target_username_display = uinfo['username']
                found = True
                break
        if not found:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            target_user_id = int(target_identifier)
            if target_user_id not in data:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            target_username_display = data[target_user_id]['username']
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ @username.")
            return

    if target_user_id is not None: # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        data[target_user_id]['subscribers'] = data[target_user_id].get('subscribers', 0) + amount
        data[target_user_id]['subscribers'] = max(0, data[target_user_id]['subscribers'])
        save_data(data)
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username_display} (ID: {target_user_id}) "
            f"{'–¥–æ–±–∞–≤–ª–µ–Ω–æ' if amount >= 0 else '—É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞'} {abs(amount)} –ø–¥–ø. "
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data[target_user_id]['subscribers']}."
        )
        logger.info(f"Admin {update.effective_user.name} set subs for {target_username_display} by {amount}. New: {data[target_user_id]['subscribers']}")

async def admin_delete_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_check(update): return
    if os.path.exists(DATABASE_FILE):
        try:
            os.remove(DATABASE_FILE)
            await update.message.reply_text(f"–§–∞–π–ª '{DATABASE_FILE}' —É–¥–∞–ª–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ.")
            logger.info(f"Admin {update.effective_user.name} deleted {DATABASE_FILE}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    else:
        await update.message.reply_text(f"–§–∞–π–ª '{DATABASE_FILE}' —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

async def admin_bot_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_check(update): return
    
    data = load_data()
    total_users = len(data)
    total_subscribers = sum(info.get('subscribers', 0) for info in data.values())
    total_videos = sum(info.get('video_count', 0) for info in data.values())
    
    active_users_last_24h = 0
    cutoff_timestamp = (datetime.now() - timedelta(days=1)).timestamp()
    for user_info in data.values():
        if user_info.get('last_used_timestamp', 0) >= cutoff_timestamp:
            active_users_last_24h +=1
            
    stats_message = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {BOT_NAME}:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚ñ∂Ô∏è –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {total_videos}\n"
        f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É –≤—Å–µ—Ö: {total_subscribers}\n"
        f" –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {active_users_last_24h}\n"
        f"üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_FILE}\n"
        f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {KEYWORDS_FILE}"
    )
    await update.message.reply_text(stats_message, parse_mode=ParseMode.HTML)


async def post_init(application: Application) -> None:
    bot_commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("addvideo", "üé¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand("leaderboard", "üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø (—Ç–µ–∫—Å—Ç)"),
        BotCommand("leaderboardpic", "üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø (–∫–∞—Ä—Ç–∏–Ω–∫–∞)"),
        BotCommand("myprofile", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
    ]
    admin_commands_for_creator = [
        BotCommand("CHEATaddsub", "üí∞ –ê–¥–º–∏–Ω: –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"),
        BotCommand("CHEATDeleteDatabase", "üóëÔ∏è –ê–¥–º–∏–Ω: –°—Ç–µ—Ä–µ—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
        BotCommand("botstats", "üìà –ê–¥–º–∏–Ω: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
    ]

    await application.bot.set_my_commands(bot_commands) # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    if CREATOR_ID:
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            await application.bot.set_my_commands(bot_commands + admin_commands_for_creator, scope=BotCommandScopeChat(chat_id=CREATOR_ID))
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—â–∏–µ –∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è ID {CREATOR_ID}).")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è: {e}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ.")
    else:
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (CREATOR_ID –Ω–µ —É–∫–∞–∑–∞–Ω).")


    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not BOT_TOKEN: logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
    if not CREATOR_ID: logger.warning("CREATOR_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env! –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    if CHANNEL_ID: logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} –∞–∫—Ç–∏–≤–Ω–∞.")
    else: logger.info("CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


def main() -> None:
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()

    handlers = [
        CommandHandler("start", start_command),
        CommandHandler("help", help_command),
        CommandHandler("myprofile", my_profile_command),
        CommandHandler("leaderboard", leaderboard_command),
        CommandHandler("top", leaderboard_command),
        CommandHandler("stats", leaderboard_command),
        CommandHandler("leaderboardpic", leaderboard_pic_command),
        CommandHandler("toppic", leaderboard_pic_command),
        CommandHandler("statspic", leaderboard_pic_command),
        CommandHandler("CHEATaddsub", admin_cheat_add_subscribers),
        CommandHandler("CHEATDeleteDatabase", admin_delete_database),
        CommandHandler("botstats", admin_bot_stats),
    ]
    add_video_aliases = ["addvideo", "video", "add", "newvideo", "publishvideo", "new", "publish"]
    for alias in add_video_aliases:
        handlers.append(CommandHandler(alias, add_video_command_wrapper))
    
    application.add_handlers(handlers)

    logger.info(f"–ë–æ—Ç {BOT_NAME} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
            f.write("user_id | username | subscribers | last_used_timestamp | video_count | active_event_type | active_event_modifier | active_event_message\n")
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_FILE}")

    if not os.path.exists(KEYWORDS_FILE):
        with open(KEYWORDS_FILE, 'w', encoding='utf-8') as f:
            f.write("# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ\n—Ö–∞–π–ø\n—Ç–æ–ø\n—ç–∫—Å–∫–ª—é–∑–∏–≤\n—Å–µ–Ω—Å–∞—Ü–∏—è\n—à–æ–∫\n")
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {KEYWORDS_FILE}")
    
    main()